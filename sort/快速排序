基本思想：以选择目标数组中最后一个数为例，找到该数在数组中所处的位置，满足左边的数均小于等于该数，右边的数均大于等于该数（以从小到大排序为例）
input:A=[4,2,5,3,6,1,3]
output:A=[1,2,3,3,4,5,6]

class quickSort(object):
    def swap(self,L,x,y):
        temp=L[x]
        L[x]=L[y]
        L[y]=temp

    def qsort(self,A,low,high):
        if low<high:
            i=self.partition(A,low,high)
            self.qsort(A,low,i-1)
            self.qsort(A,i+1,high)

    def partition(self,L,l,r):#选取最右边作为目标值
        g=L[r]
        j=l-1
        for i in range(l,r):
            if L[i]<=g:
                j+=1
                self.swap(L,i,j)
        self.swap(L,j+1,r)
        return j+1

a=quickSort()
L=[4,2,5,3,6,1,3]
a.qsort(L,0,len(L)-1)
print(L)
